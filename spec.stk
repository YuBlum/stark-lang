# stark language spec v0.1.0 - Yuri Novais Ferreira
# comments start with '#' and go up to the end of the line
# statically typed, compiled systems programming language
# manual memory management.
# unicode is supported for identifiers

# 1. Functions
# functions definitions are done as the following:
#   def foo : fn[<<generics>>](<args>) [return-type] => <expression>
def square : fn(a = i32) i32 => a*a; # <- example
# the return type of a function that returns nothing is 'void':
def foo : fn() void =>;
# but the 'void' can be omitted:
def foo : fn() =>;
# you'll most likely need a function with multiple statements and expressions. luckily there is the statement block, an _expression_ that encapsulate multiple statements.
def foo : fn() => {
  # code...
}
# a statement block always returns the last expression value
def foo : fn() i32 => {
  def x = 10;
  x*x; # <- returns 100
}
# so this will generate a compile error because foo is not supposed to return anything:
def foo : fn() void => {
  def x = 10;
  x*x; # <- compile error
}
# if a expression is necessary as statement for whatever reason you can set it to the special variable '_', variable declarations are statements so the value will be dropped:
def foo : fn() void => {
  def x = 10;
  _ = x*x; # <- valid
}
# the '_' variable is always pre-defined, you can't read from it and it'll always just ignore the assigned expression
# because statement blocks are just expressions you can do stuff like this:
def VALUE : 2;
def foo : fn() i32 => {
  def x = {
    def x = 10; # variable shadowing
    def VALUE : 5; # constant shadowing
    x*VALUE; # 10 * 5, returns 50
  }; # need semicolon because { ... } is part of the 'def x = ...' statement. every statement or expression needs to end on a semicolon inside a block
  x*VALUE; # 50 * 2, returns 100
}
# you can also early return from a statement block using the 'ret' or 'brk' keyword
# they're used like:
#   ret <expr> and brk <expr>
# the afterwords expression will be the returned expression
def foo : fn() i32 => {
  if something => ret 5;
  if somethingelse => brk 5;
  10;
}
# the difference between then is:
# ret = return from the root block, exiting all nestead statement blocks at once
# brk = break from the current block only.
# this means this code:
def foo : fn() {
  {
    if something => ret; # exits from the function
    if somethingelse => brk; # exits from the block
  }
}
# if you have multiple nested blocks and want to break more than one at a time you can append multiple '<' to the brk keyword. the amount of '<' is the amount extra blocks it'll break:
def foo : fn() {
  {
    {
      if something => brk<; # this will break to the main statement block
    }
    {
      if something_else => brk<<; # this will break from the main statement block, equivalent to 'ret' in this case.
    }
  }
}
# this can become quite cumbersome when you have multiple nested statement blocks:
def foo : fn() {
    {
      {
        {
          {
            brk<<<<; # this will get back to the function
          }
        }
      }
    }
  }
}
# so you can tag statement blocks using a `<tag-name>`. then you can break using 'brk`<tag-name>`':
def foo : fn() {
    def a = `assign_to_a` {
      {
        {
          {
            brk`assign_to_a` 10; # 'a' will be assigned to 10
          }
        }
      }
    }
  }
}
# the 'ret' keyword only returns from the root block, not from the function:
def bar : fn(something = bool) i32 =>
  if (something) => {
    {
      {
        ret 10; # return to 'if (something) => <here>'
      }
    }
  } else => {
    ret 9; # return to 'else => <here>'
  }
# if you have multiple arguments with the same type in a row you only need to specify the type once:
def foo : fn(a, b, c = i32, d, f, g = i64) # equivalent to (a = i32, b = i32, c = i32, d = i64, f = i64, g = i64)
# functions that receives exactly two arguments can be called as an infix-call 'x foo y', where x and y are values and foo is the function.
def add : fn(a, b = i32) => a + b;
def foo : fn(a, b = i32) => a add b; # equivalent to add(a, b)
# with the infix-call if one of the arguments is a pointer it'll be automatically addressed if not explicitly addressed:
def add : fn(a = i32, b = *i32) => a + *b;
def foo : fn(a, b = i32) => a add b; # equivalent to add(a, &b) or 'a add &b'
# if a function exactly one argument you can call it without parenthesis:
def double : fn(a = i32) i32 => a*2;
double 2;
# function arguments can have default values:
def foo : fn(x = i32 10) =>;
# you can also infer the argument type by it's default value:
def foo : fn(x = 10) =>; # is an i32
# a default value have to be known at compile time:
def foo : fn(buff = alloc<u8>(10)) *u8; # compile error
# a function can also have generic arguments:
def add: fn<T>(a, b = T) T => a + b;
# T is not a special name, you can name it whatever you want:
def add: fn<add_type>(a, b = add_type) add_type => a + b;
# you can also add compile time conditions to generic arguments
def add_int : fn<T, T is integer>(a, b = T) T => a + b;
# calling generic arguments:
def add: fn<T>(a, b = T) T => a + b;
def a = add<i32>(1, 2); # explictly
def b = add(1, 2); # inferred
# entry point via 'main' function:
def main : fn() =>; # code starts running here
# functions are just values, so you can functions inside functions:
def foo : fn() => {
  def bar : fn () =>;
  bar();
}

# 2. Constants
# constants are type checked values defined at compile time
# constants definitions are done as the following:
#   def FOO : [type] <value>
def SOME_CONSTANT : 0;
# this is because a functions is nothing more than a constant with a function literal as its value.
# constant types are inferred, but can be explicitly defined:
def ZERO : i32 0;
# constants always needs to have a value even if it's type isn't needed:
def ZERO : i32; # creates type aliases instead of i32(0)
# you can create aliases to types with constants:
def int32_t : i32;
# every type also has a type, and it is 'type'. so you can define a type alises as such:
def int32_t : type i32;
# even 'type' has the type 'type':
def Type : type type;
# to create distinct type aliases:
def int : type(i32);
int is i32; # false
# distinct type aliases inherit all its source type families:
def int : type(i32);
int is number;  # true
int is integer; # true
int is signed;  # true
# functions definition are similar to constant definitions because functions actually don't have names and are anonymous by default, you have to wrap them in a constant.
# it doesn't cause problems with recursion though, the constant is defined before the function body.
# function types are represented as: fn(<args without names>) -> <return type>
# so you can do type alises of function types:
def function_type : type fn(i32, i32) -> i32;
# because functions are only constants you can also define a function with its typed explicity:
def add2 : fn(i32, i32) -> i32 fn(a, b = i32) i32 => a + b; # this is a function constant with it's type defined explictly
def add : function_type fn(a, b = i32) i32 => a + b; # using the 'function_type' constant
# both of this ways are quite cumbersome though, so it's better to just define the function the normal way 'def foo : fn(<args>) <return-type> =>'

# 3. Variables
# variables are pretty much like constants, with the difference that the value can be unknown at compile time
# variables definitions are done as the following:
#   def FOO = [mut] [type] <value>
def x = 0;
# type is also inferred in variables
# variables by default are immutable, like constants, but if needed you can define them as mutable:
def x = mut 0;
# function arguments are variables and as such immutable by default. to make them mutable is the same deal:
def foo : fn(x = mut i32) =>;
# you can create a variable without a value by providing only the type:
def x = i32;
x = 10;
x = 5; # error, can only assign once
# this variable is still immutable though, so it can only be assigned once after it's definition.
# because of this feature if you want to make a variable a type alias you have to set its type explicitly:
def int32_t = type i32;
# variables defined with no value always defaults to 0, if it's a struct all its members are defined to 0 or its default value.
# to make them uninitialized with stack garbage you have to specifically say it:
def x = i32 ---;
# you can define multiple variables of the same type on one statement:
def a, b, c = i32;

# 4. Primitive types
# signed integers: i8, i16, i32, i64
# unsigned integer: u8, u16, u32, u64
# pointer size variables: isize, usize
# floats: f32, f64
# 'char' is an utf-32 character type
# 'str' is the builtin string type, in reality just an utf-8 encoded u8 slice
#   string literals:
"hello, world"; # generate a 'str'
# 'cstr' is similar to 'str' but exclusively for c strings, it uses ASCII instead of utf-8 and it's null-terminated
# if it was represented with a struct it would be:
#   c strings can be passed directly to c apis
#   c string literals:
c"hello, world"; # generates a 'cstr'
# to access string lengths use the len() overload set

# 5. Pointers
# You can grab a pointer to a variable with the address operator '&':
def a = i32;
def ptr_to_a = &a; # get address of a
def ptr_to_a_explicit: *i32 &a; # explicit type of pointer
def b = *a; # dereferencing a
# They're immutable by default, so if you want to change the stuff inside a pointer you need to use &mut:
def a = mut i32;
def ptr_to_a = &mut a;
*ptr_to_a = 10;
# You can't make a mutable pointer of a immutable variable
def a = i32;
def ptr_to_a = &mut a; # compile error
# The access operator '[]' can't be used on pointers, but array arithimatic is valid:
def ptr = alloc<i32>(4);
ptr[2] = 4; # error
*(ptr + 2) = 4; # valid
# *void can be used to a pointer that just points to anything, you can't do pointer arithimatic or derefence them tho:
def ptr = *void &a;
# null keyword:
def foo = *void null; # points to nothing
def foo = *void; # intializes to null
# pointer compersion _is_ possible with pointers of the same type:
def foo0 = *void;
def bar0 = *u8;
foo0 == bar0; # compile error, pointers not of the same type
def foo1 = *void;
def bar1 = *void;
foo1 == bar1; # true, both are null
# you can transmute a pointer into another pointer using the 'trans' keyword:
def a = i32;
def p = &a;
def q = trans a -> *i8;

# 6. Arrays and slices
# arrays definitions are done as the following:
#   def foo = [n]i32;
#   'n' has to be an integer known at compile time
def foo = [3]i32; # valid
def bar = [some_func_that_returns_int()]i32; # compile error
# you can create an array with it's type inferred using array literals:
def arr = [1, 2, 3]; # array type is infered from the first element value
# you can also define the type explicitly and leave out the length if you use literals:
def arr = []i32 [1, 2, 3]; # length will be three
# some other initalization examples:
def arr0 = [3]i32 [1, 2, 3]; # array with explicit type and size
def arr1 = [3]i32; # default every value
def arr2 = [3]i32 ---; # unitialize memory
# Arrays only store it's values because length is already known at compile time.
# to get an array length use the builtin 'len' overload set:
def arr = [5, 6, 7, 8, 9];
def arr_len = len(arr); # arr_len = 5
# arrays also have compile time bound checks:
def arr = [5, 6];
arr[2] = 7; # compile time error
# this is a compile time value because array length _must_ be known at compile time.
# array don't decay to pointers:
def arr = [3]i32;
def ptr = *i32 arr; # compile error
# but you can take the address of an array, making it a pointer explicitly:
def arr = [3]i32;
def ptr = &arr; # valid, ptr is of type *i32 now
# it's also not possible to define function arguments as arrays, therefore it's not possible to pass arrays into functions:
def foo : fn(arr = [3]i32) =>; # compile error
# what you can do is pass it as a pointer:
def foo : fn(arr = *i32) =>;
def arr = [3]i32;
foo(&arr); # valid
# but this becomes inconvenient because you don't have access to the access operator '[]' neither the len() overload set:
def foo : fn(arr = *i32, arr_len = usize) i32 => *(arr + arr_len - 1);
def arr = [3]i32;
foo(&arr, len(arr)); # valid
# it's also unsafe, because pointers don't do bound checks:
def foo : fn(arr = *i32, arr_len = usize) i32 => *(arr + array_len); # it'll compile even though it's out of bound
# that's when slices comming
# they're in reality just a pointer and a size, but they will have access to the access operator '[]', bound checks and the len() overload set
# to create a slice from an array use the following syntax:
def arr = [3]i32;
def slice0 = [..]arr;
# the '..' is an empty range, this means all of the array is gonna be passed to the slice. you can also partially slice:
def arr = [10]i32;
def slice0 = [3..6]arr; # points to &arr[3] and has size 3
def slice1 = [..]i32 [3..6]arr; # explicit type of a slice is an empty range '..', it can't be a not empty range
# slices can be passed to functions:
def foo : fn(arr = [..]i32) i32 => arr[len(arr) - 1];
def arr = [1, 2, 3];
foo(arr);
# you can pass array literals to functions using slices
foo([1, 2, 3]);
# but you can't use an array literal directly on a slice:
def arr = [...]i32 [1, 2, 3]; # compile error
# if you want to change the values of an array from a slice you need to make a mutable slice:
def arr = mut [3]i32;
def slice = [..]mut arr; 
slice[0] = 10; # valid
# it's only possible to do a mutable slice of a mutable array
def arr = [3]i32;
def slice = [..]mut arr; # compile error
# if you want a slice that can change it's pointed array you make the slice variable itself mutable:
def arr0 = [3]i32;
def arr1 = [5]i32;
def slice = mut [..]i32;
slice = [..]arr0; # valid
slice = [..]arr1; # valid
def arr2 = [5]i8;
slice = [..]arr2; # compile error. the array value needs to be the same as the slice value
# so for a mutable slice that points that haves a mutable array inside you need to:
def arr0 = mut [3]i32;
def arr1 = mut [4]i32;
def slice = mut [..]mut arr0;
slice = [..]mut arr1; # valid

# 7. structs
# structs definitions are done as the following:
#   def Foo : struct[<<generic types>>](<member variables>)
def Foo : struct(a = i32);
# struct field members are variables, and as such you can define them with all the methods previously mentioned:
def Foo : struct(
  a = i32,
  b = 10, # default value, needs to be a constant like in functions default values
  c = i32 9,
  d, e = i32,
  f = i32 ---,
);
# structs have the 'type' type, so is also possible to make aliases:
def Bar : type Foo;
# you make a instance of a struct with the following syntax:
def Point : struct(x, y = i32);
def p1 = Point(1, 2);
def p2 = Point(x = 4, y = 1); # or naming the members directly
def p3 = Point(...); # you can also explicitly create an instance with its members default values
def p4 = Point(1, ...) # set first member and default the rest
def p5 = Point(y = 3, ...) # set one member by name and default the rest
# you can also have generic types for structs:
def Foo : struct<T>(a = T);
# it's possible to define constants for structs:
def Foo : struct(a, b = i32);
def Foo.BAR : 10;
# for generic structs you create a constant with the following syntax:
def Foo : struct<T>(a, b = T);
def Foo<T>.BAR : 10;
# you can access the constants from struct instances
def Foo : struct(a, b = i32);
def Foo.BAR : 10;
def x = Foo;
def y = x.BAR # y = 10
# it's also possible to define functions using the constants for structs:
def Foo.bar : fn(int a, b) i32 => a + b;
# if you try to call a struct function using an instance the instance is passed as a reference to the first argument:
def Vec2 : struct(x, y = f32);
def Vec2.add : fn(v0, v1 = *Vec2) Vec2 => Vec2(v0.x+v1.x, v0.y+v1.y);
def pos = Vec2(5, 3);
pos.add(&Vec2(1, 1)); # equivalent to: Vec2.add(&pos, &Vec2(1, 1))
# if the first argument of the method is not a reference to a struct instance it'll generate a compile error
# you tecnically can do this:
def Foo : struct(bar = fn(self = *Foo) =>;);
# but it'll not give you the method-like call that the constant option brings, it'll also waste memory.
# all members mutabilities depends on the struct instance by default, so you can't mark a member mutable, but you can forcefully say that an field is immutable with the 'imm' attribute.
def Foo : struct(ptr : imm *i32);
# this variable can only be set normaly in the struct initialization:
def Foo : struct(ptr : imm *i32);
def foo = mut Foo(&a);
foo.ptr = &b; # compile error
# you'll probably still want to modify the field member somehow, this can only be done explicitly using the keyword 'renege':
def Foo : struct(ptr : imm *i32);
def foo = mut Foo(&a);
renege foo.ptr = &b; # valid
# the 'renege' and 'imm' keywords can only be used in struct fields. if the entire struct is immutable 'renege' will not work.
def Foo : struct(ptr : imm *i32);
def foo = Foo(&a);
renege foo.ptr = &b; # compile error
# if you have a struct that have other structs as members and want to access the members of the member struct directly you can use the 'take' attribute:
def Vec2 : struct(x, y = f32);
def Entity : struct(position = take Vec2);
def e = Entity;
e.x = 10.5; # access e.position.x
e.position.y = 2.3; # direct access is still possible
# conflicting take members need to use the direct access approach
def Vec2 : struct(x, y = f32);
def Vec3 : struct(x, y, z = f32);
def Entity : struct(position = take Vec2, color = take Vec3);
def e = Entity;
e.x = 10.5; # compile error, conflicting takes
# you can also use 'take' on function parameters:
def Entity : struct(position = take Vec2);
def Entity.move(self = take *Entity, Vec2 amount) => position += amount; # position field from entity
def Entity.move2(self = take *Entity, Vec2 amount) => {
  x += amount.x; # you can access 'take' members from 'take' members
  y += amount.y;
}
# 'take' on variables is not possible though:
def e = take Entity; # compile error
# all the take rules apply for methods:
def Foo : struct(...);
def Foo.method(self = take *Foo) => ...;
def Bar : struct(foo = take Foo);
def bar = Bar;
bar.method(); # bar.method() -> bar.foo.method() -> Foo.method(&bar.foo)
def Bar.method2(self = take *Bar) => method(); # method() -> bar.method() -> bar.foo.method() -> Foo.method(&bar.foo)
# 'take'ing is not the same as inheriting on other languages you can't do:
def Foo : struct(...);
def Bar : struct(foo = take Foo);
def something(foo = *Foo) => ...;
def bar = Bar;
something(&bar); # compile error, passing a *Bar to a *Foo paremeter
something(&bar.foo); # valid

# 8. Type families and 'is' operator
# a type can be part of a 'type family'.
# to define a type family you use the '+' operator on types:
def foo : i32 + f32;
def bar : typefam i32 + f32; # explicit type
# it can even be used on type families to create new type families:
def foo : integer + float + str; # typefam + typefam + type = typefam
# it's also possible to use the '-' operator for excluding types from the new type family:
def foo : integer - i32 - i64;
def newsigned : integer - unsigned; # can exclude type families from type families
# parenthesis can be used as well:
def foo : any - (struct + string);
# you can add new types to already existing type families:
def foo : i32 + f32;
foo <- i64;
# you can even put type families inside existing type families:
def foo : i32 + f32;
foo <- string;
# if you create a type family using a parent type family and later a new type is added to the parent family the type will also be added to the child family:
def foo : integer + string;
integer <- f32; # now foo also haves f32
# if this is not a wanted behaviour you can create an independet type family with other type families as bases only:
def foo : typefam(integer + string);
integer <- f32; # foo doesn't have f32
# with this you can have type families aliases and distinct aliases:
def my_integer : integer; # aliases
def my_distinct_integer : typefam(integer); # distinct
# you can use the typefam(types|family) constructor to make families with only one type in it:
def foo : typefam(i32); # this is good for future extensibility
# or even no types at all:
def foo : typefam();
# when creating a type family you also can put overload sets that types belonging to that family will need to have overloads to using '|'
def say_hello : ol();
def foo : typefam() | say_hello;
def Person : struct(age = i32, name = string);
def Person.say_hello(self = *Person) => println("My name is ", self.name, " and i'm ", self.age, "years old");
foo <- Person; # person overloads say_hello, so it's fine
def Bar : struct(y = i32);
foo <- Bar; # bar doesn't overloads say_hello, compile error
# type families that include type families with requiring overloads will pass to require does same overloads
# you can create anonymous type families:
i32 + i32;
# this is good for inserting a type into multiple type languages:
def foo : struct(i = i32, s = str);
integer + string <- foo;
# and vice-versa:
def integer32 : i32 + u32;
def tf2 : i8  + u8 ;
def tf3 : u16 + u16;
integer32 <- tf2 + tf3;
# you can check if a type, variable or constant is part of type family with the 'is' operator:
def x = i32 0;
def y = f64 0.0;
def X : i32 0;
def Y : f64 0.0;
i32 is foo # true
f32 is foo # true
i64 is foo # true
x   is foo # true
X   is foo # true
f64 is foo # false
y   is foo # false
Y   is foo # false
# the 'is' operator is also used for detecting if a type, variable or constant is equal to a certain type:
def x = i32 0;
def y = i64 0;
def X : i32 0;
def Y : i64 0;
i32 is i32 # true
x   is i32 # true
X   is i32 # true
i32 is i64 # false
y   is i32 # false
Y   is i32 # false
# 'is' is a compile time operator only
# you can use anonymous type families with the 'is' operator:
def x = i32 0;
x is integer - signed; # false
x is integer - i32; # false
x is unsigned + i32; # true
x is integer - (i32 + i64); # false
# default families:
# any       : all types, primitives, distinct aliases, structs
# signed    : tf(i8, i16, i32, i64, isize)
# unsigned  : tf(u8, u16, u32, u64, usize)
# integer   : tf(signed, unsigned)
# float     : tf(f32, f64)
# number    : tf(integer, float)
# string    : tf(str, cstr)
# primitive : tf(number, string, char)
# struct    : all structs
# function  : all functions

# 9. Overload sets
# you can create something called an 'overload set'. an overload set can have multiple functions inside of it and it'll decide the proper call based on the arguments.
# overload sets definitions are done as the following:
#   def foo : ol[[(<define-patterns>)] (<args>) -> <return>](functions);
def add_i32 : fn(a, b = i32) => a + b;
def add_f32 : fn(a, b = f32) => a + b;
def add : ol(add_i32, add_f32); # creates an overload set to the add_i32 and add_f32 functions
def foo : fn() => {
  add(1, 2); # calls add_i32
  add(1.0, 2.0); # calls add_f32
}
# it's also possible to add new functions to an already defined overload set:
def add_f64 : fn(a, b = f32) => a + b;
def add_3_i32 : fn(a, b, c = i32) => a + b + c;
add <- add_f64; # adds the add_f64 function to the 'add' overload set
add <- add_3_i32; # functions don't need to have the same amount of arguments
# if you want an overload set to only accept functions that follow an specific pattern create it like this:
#    def foo : ol [(<define-patterns>)] (<args>) -> <return> (<functions>);
# a pattern is an identifier followed by a type, a family type or an previous pattern:
#    a any
#    a *any
#    a *mut any
#    a any, b *a
# the '*' is for pointers and can be of any depth
# on the <args> and <return> section on just need to put the name of the pattern:
def foo : ol (a any, b i32) (a, b) -> b ();
# if you use the same pattern for args or return value, the type needs to be the same:
def foo : ol (a any) (a, a) -> a ();
def add_i32_i32 : fn(a, b = i32) i32 => a + b;
def add_f32_f32 : fn(a, b = f32) f32 => a + b;
def add_i32_f32 : fn(a = i32, b = f32) f32 => f32(a) + b;
foo <- add_i32_i32; # it's fine
foo <- add_f32_f32; # it's fine
foo <- add_i32_f32; # compile error
# to accept any value on all arguments/return you need to do:
def foo : ol (a any, b any, c any) (a, b) -> c ();
def add_i32_i32 : fn(a, b = i32) i32 => a + b;
def add_f32_f32 : fn(a, b = f32) f32 => a + b;
def add_i32_f32 : fn(a = i32, b = f32) f64 => f64(f32(a) + b);
foo <- add_i32_i32; # it's fine
foo <- add_f32_f32; # it's fine
foo <- add_i32_f32; # it's fine
# but this can become quite cumbersome if you have multiple arguments. so a special pattern exists '_' this will aceppt any arguments anywhere it's used:
def foo : ol (_, _) -> _ ();
def add_i32_i32 : fn(a, b = i32) i32 => a + b;
def add_f32_f32 : fn(a, b = f32) f32 => a + b;
def add_i32_f32 : fn(a = i32, b = f32) f64 => f64(f32(a) + b);
foo <- add_i32_i32; # it's fine
foo <- add_f32_f32; # it's fine
foo <- add_i32_f32; # it's fine
# if needed you can define '_' to follow an specific pattern:
def foo : ol (_ integer) (_, _) -> _ ();
def add_i32_i32 : fn(a, b = i32) i32 => a + b;
def add_f32_f32 : fn(a, b = f32) f32 => a + b;
def add_i32_f32 : fn(a = i32, b = f32) f64 => f64(f32(a) + b);
foo <- add_i32_i32; # it's fine
foo <- add_f32_f32; # it's fine
foo <- add_i32_f32; # it's fine
# this is called an patterned overload set
# functions with same arguments amount and types in overload sets generate a compile error
# you can add an overload set to an overload set:
def add2_i32 : fn(a, b = i32) i32 => a + b;
def add2_f32 : fn(a, b = f32) i32 => a + b;
def add2     : ol(add2_i32, add2_f32);
def add3_i32 : fn(a, b, c = i32) i32 => a + b + c;
def add3_f32 : fn(a, b, c = f32) i32 => a + b + c;
def add3     : ol(add3_i32, add3_f32);
def add      : ol(add2, add3);
def add4_i32 : fn(a, b, c, d = i32) i32 => a + b + c + d;
def add4_f32 : fn(a, b, c, d = f32) i32 => a + b + c + d;
def add4     : ol(add4_i32, add4_f32);
add <- add4;
# overload sets of overload sets can have different patterned overload sets inside it:
def foo_set : ol (_, _) -> _ ();
def bar_set : ol (_) -> _ ();
def foobar_set : ol(foo_set, bar_set);
# to add a generic function to an overload set you just need to pass the name:
def add2: fn<T>(a, b = T) T => a + b;
def add3: fn<T>(a, b, c = T) T => a + b + c;
def add: ol(add2, add3);
def add4: fn<T>(a, b, c, d = T) T => a + b + c + d;
add <- add4;
# Most of the basic math operators are in reality patterned overload sets: +, -, / and so on.
# you can tecnically do:
+(1, 2);
# so you can add your custom functions to these operators:
def Vec2 : struct(x, y = f32);
def Vec2.add : fn(v0, v1 = *Vec2) Vec2 => Vec2(v0.x+v1.x, v0.y+v1.y);
+ <- Vec2.add;
def pos = Vec2(5, 3);
def a = pos + Vec2(1, 1);
# '*' is actually an overload set of two different patterned overload sets: 'mul' (multiplication) and 'deref'(pointer dereference).
def mul_i32 : fn(a, b = i32) i32 => a * b;
mul <- mul_i32;
def Box : struct<T>(ptr = *T);
Box.make : fn<T>() Box<T> => Box(alloc<T>(1));
Box.get  : fn<T>(self = *mut Box<T>) *mut T => self.ptr;
deref <- Box.get;
# the [] operator is an special overload set of patterned overload set: aget and aset
# it's the only overload set that can be called with the arg1[arg2] syntax.
def List : struct<T>(size, capacity = i32, buffer = *T);
def List.get : fn<T>(self = *List<T>, index = usize) T => *(self.buffer + index);
def List.set : fn<T>(self = *mut List<T>, index = usize) *mut T => self.buffer + index;
aget <- List.get;
aset <- List.set;
def foo = List<u32>
foo[0] = 1; # *List.set(&mut foo, 0) = 1
def a = foo[0]; # a = List.get(&foo, 0)
# '<-' and '->' are also overload sets:
def List.make fn<T>() List<T> => List<T>(size = 0, capacity = 1, buffer = alloc<T>(1));
def List.push fn<T>(self = *mut List<T>, value = T) {
  self.size++;
  if self.capacity <= self.size => {
    self.capacity *= 2;
    realloc(&self.buffer, self.capacity);
  }
  self[self.size - 1] = value;
}
<- <- List.push;
def List.pop fn<T>(self = *mut List<T>, out = *T) => {
  if out == null || self.size == 0 => ret; 
  *out = self[self.size--];
}
-> <- List.pop;
def nums = mut List.make<i32>();
nums <- 10; # pushes 10 into nums list
nums <- 55; # pushes 55 into nums list
nums <- 3;  # pushes 3 into nums list
def n = i32;
nums -> n; # pops 3 into n
# you can use unicode for the identifiers:
def Vec2 : struct(x, y = f32);
def Vec2.dot : fn(v0, v1 = *Vec2) f32 => v0.x*v1.x + x0.y*v1.y;
d•t <- Vec2.dot
# so something like this is possible:
· <- Vec2.dot;
def a = Vec2(5, 3);
def b = Vec2(6, -4);
def dot = a · b;
# builtin overload sets:
def +     : ol (_, _) -> _                          (); # plus
def -     : ol (_, _) -> _                          (); # minus
def /     : ol (_, _) -> _                          (); # divide
def ^     : ol (_, _) -> _                          (); # power
def %     : ol (_, _) -> _                          (); # mod  
def |     : ol (_, _) -> _                          (); # bitwise or
def ~     : ol (_, _) -> _                          (); # xor
def <<    : ol (_, _) -> _                          (); # bit shift left
def >>    : ol (_, _) -> _                          (); # bit shift right
def +=    : ol (_, _) -> _                          (); # plus equals
def -=    : ol (_, _) -> _                          (); # minus equals
def /=    : ol (_, _) -> _                          (); # divide equals
def ^=    : ol (_, _) -> _                          (); # power equals
def %=    : ol (_, _) -> _                          (); # mod equals
def |=    : ol (_, _) -> _                          (); # bitwise or equals
def &=    : ol (_, _) -> _                          (); # bitwise and equals
def ~=    : ol (_, _) -> _                          (); # xor equals
def <<=   : ol (_, _) -> _                          (); # bit shift left equals
def >>=   : ol (_, _) -> _                          (); # bit shift right equals
def and   : ol (_, _) -> _                          (); # bitwise and
def addr  : ol (a *any) (_) -> a                    (); # address of 
def &     : ol (and, addr);                             # and and addr 
def &mut  : ol (a *mut any) (_) -> a                    # mutable address of
def <-    : ol (_, _) -> void                       (); # push 
def ->    : ol (_, _) -> void                       (); # put
def *=    : ol (_, _) -> _                          (); # multiply equals
def mul   : ol (_, _) -> _                          (); # multiply
def deref : ol (_)    -> _                          (); # dereference pointer
def *     : ol (mul, deref);                            # mul and deref
def aget  : (a *any) ol (a, _) -> _                 (); # access
def aset  : (a *mut any, b *mut any) ol (a, _) -> b (); # access
def []    : ol (aget, aset);                            # access
def =     : (a any, b *any) ol (b, a) -> void       (); # assign
def !     : ol (_) -> _                             (); # not
def ==    : ol (a bool) (_, _) -> bool              (); # equals
def !=    : ol (a bool) (_, _) -> bool              (); # not equals
def ||    : ol (_, _) -> _                          (); # logical or
def &&    : ol (_, _) -> _                          (); # logical and

# 10. allocators

